@use "sass:map";
@use "sass:math";
@use "sass:list";
@use "sass:string";
@use "sass:meta";

// background-image: svg-to-data-uri('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9.41 5.41"><polygon points="4.71 5.41 0 0.71 0.71 0 4.71 4 8.71 0 9.41 0.71 4.71 5.41"/></svg>');

@function svg-to-data-uri($svg, $fill: null) {
	$svg: if($fill, str-replace($svg, "<svg", "<svg fill='#{$fill}'"), $svg);
	$svg: str-replace($svg, "<svg", "<svg xmlns='http://www.w3.org/2000/svg' ");
	$svg: str-replace($svg, "<", "%3C");
	$svg: str-replace($svg, ">", "%3E");
	$svg: str-replace($svg, '"', "'");
	$svg: str-replace($svg, "#", "%23");
	$svg: str-replace($svg, "&", "%26");

	@return url("data:image/svg+xml,#{$svg}");
}

@function strip-unit($number) {
	@if meta.type-of($number) == "number" and not math.is-unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

@function px-vw($px-vw, $base-vw: 1920px) {
	@return math.div(strip-unit($px-vw) * 100, strip-unit($base-vw)) * 1vw;
}

@function rem-vw($rem, $base-vw) {
	@return #{math.div((strip-unit($rem) * 100), strip-unit($base-vw))}vw;
}

@mixin media($value, $min-max: max) {
	@media screen and (#{$min-max}-width: $value) {
		@content;
	}
}

@mixin keyframes($name) {
	@keyframes #{$name} {
		@content;
	}
}

@mixin wh($width, $height: $width) {
	width: $width;
	height: $height;
}

@mixin mx($left, $right: $left) {
	margin: {
		right: $right;
		left: $left;
	}
}

@mixin my($top, $bottom: $top) {
	margin: {
		top: $top;
		bottom: $bottom;
	}
}

@mixin px($left, $right: $left) {
	padding: {
		right: $right;
		left: $left;
	}
}

@mixin py($top, $bottom: $top) {
	padding: {
		top: $top;
		bottom: $bottom;
	}
}

@mixin relative {
	position: relative;
	top: 0;
	left: 0;
}

@mixin absolute {
	position: absolute;
	top: 0;
	left: 0;
}

@mixin full-fill {
	@include absolute;

	right: 0;
	bottom: 0;
}

@mixin cover($val: cover) {
	@include wh(100%);

	object-fit: $val;
}

@mixin kill-space {
	margin: 0;
	padding: 0;
}

@mixin truncat($line) {
	display: -webkit-box !important;
	overflow: hidden;
	white-space: normal;
	text-overflow: ellipsis;
	-webkit-line-clamp: $line;
	-webkit-box-orient: vertical;
}

@mixin ellipsis {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

@mixin l-center-y($type: absolute, $top: 50%) {
	position: $type;
	top: $top;
	transform: translateY(-50%);
}

@mixin l-center-x($type: absolute, $left: 50%) {
	position: $type;
	left: $left;
	transform: translateX(-50%);
}

@mixin l-center($type: absolute, $top: 50%, $left: 50%) {
	position: $type;
	top: $top;
	left: $left;
	transform: translate(-50%, -50%);
}

@mixin f-center-x($display: flex) {
	display: $display;
	justify-content: center;
}

@mixin f-center-y($display: flex) {
	display: $display;
	align-items: center;
}

@mixin f-center($display: flex) {
	display: $display;
	justify-content: center;
	align-items: center;
}

@mixin arrow($direction: down, $size: 5px, $color: #555) {
	width: 0;
	height: 0;

	@if $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	} @else if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	} @else {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	}
}

@mixin placeholder {
	&.placeholder {
		@content;
	}

	&:placeholder {
		@content;
	}

	&::placeholder {
		@content;
	}

	&:input-placeholder {
		@content;
	}

	&::input-placeholder {
		@content;
	}
}

@mixin flexbox(
	$display: flex,
	$direction: row,
	$placeContent: null,
	$placeItems: null,
	$wrap: nowrap,
	$shrink: 0,
	$grow: 0,
	$alignContent: null,
	$justifyContent: null,
	$alignItems: null,
	$justifyItems: null
) {
	display: $display;
	flex-flow: $direction $wrap;

	@if $placeContent == null {
		@if $alignContent {
			align-content: $alignContent;
		}

		@if $justifyContent {
			justify-content: $justifyContent;
		}
	} @else {
		place-content: $placeContent;
	}

	@if $placeItems == null {
		@if $alignItems {
			align-items: $alignItems;
		}

		@if $justifyItems {
			justify-items: $justifyItems;
		}
	} @else {
		place-items: $placeItems;
	}

	flex-shrink: $shrink;
	flex-grow: $grow;
}

@mixin kill-space {
	margin: 0;
	padding: 0;
}

@function position($position: rel) {
	@if $position == rel {
		@return relative;
	} @else if $position == abs {
		@return absolute;
	} @else if $position == fix {
		@return fixed;
	}
}

@mixin p($position: rel, $top: 0, $left: 0) {
	position: position($position);
	top: $top;
	left: $left;
}
